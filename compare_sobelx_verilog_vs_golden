#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
compare_sobelx_verilog_vs_golden.py

Compara o PGM do Verilog com o Golden Model (Python) para Sobel-X.
- Entrada: imagem em .hex (00–FF por linha) OU PNG/PGM 8-bit
- Saída: métricas (MAE, MSE, PSNR) no miolo Ω e figuras (side-by-side, erro, histogramas)

Requisitos:
  pip install numpy pillow matplotlib
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# =====================
# Funções utilitárias
# =====================
def read_hex_image(path, width=256, height=256):
    """Lê imagem .hex (um valor 00–FF por linha)."""
    with open(path, "r") as f:
        vals = [line.strip() for line in f if line.strip() != ""]
    arr = np.array([int(v, 16) for v in vals], dtype=np.uint8)
    if arr.size != width * height:
        raise ValueError(f"Tamanho incompatível: {arr.size} vs {width}x{height}.")
    return arr.reshape((height, width))

def read_pgm_p2(path):
    """Lê PGM ASCII (P2)."""
    with open(path, "r") as f:
        lines = f.readlines()
    lines = [ln for ln in lines if not ln.strip().startswith("#")]
    assert lines[0].strip() == "P2", "PGM deve ser P2 (ASCII)."

    # dimensões
    idx = 1
    while lines[idx].strip().startswith("#") or lines[idx].strip() == "":
        idx += 1
    w_h = lines[idx].strip().split()
    while len(w_h) < 2:
        idx += 1
        w_h += lines[idx].strip().split()
    W, H = map(int, w_h[:2])

    # maxval
    idx += 1
    while lines[idx].strip() == "" or lines[idx].strip().startswith("#"):
        idx += 1
    maxval = int(lines[idx].strip())

    # pixels
    idx += 1
    pix_tokens = []
    for k in range(idx, len(lines)):
        toks = lines[k].strip().split()
        if toks:
            pix_tokens.extend(toks)
    data = np.array(list(map(int, pix_tokens)), dtype=np.int32)
    if data.size != W * H:
        raise ValueError(f"PGM com {data.size} amostras, esperado {W*H}.")
    if maxval != 255:
        data = np.round(data * (255.0 / maxval)).astype(np.int32)
    return data.astype(np.uint8).reshape((H, W))

def sobel_x_golden(img_u8, divide_by_8=True, rounding=True, gain=2):
    """Golden Sobel-X conforme especificação do relatório."""
    Kx = np.array([[-1, 0, 1],
                   [-2, 0, 2],
                   [-1, 0, 1]], dtype=np.int32)
    H, W = img_u8.shape
    img = img_u8.astype(np.int32)
    P = np.pad(img, ((1,1),(1,1)), mode="constant", constant_values=0)
    acc = (Kx[0,0]*P[0:H,   0:W]   + Kx[0,1]*P[0:H,   1:W+1] + Kx[0,2]*P[0:H,   2:W+2] +
           Kx[1,0]*P[1:H+1, 0:W]   + Kx[1,1]*P[1:H+1, 1:W+1] + Kx[1,2]*P[1:H+1, 2:W+2] +
           Kx[2,0]*P[2:H+2, 0:W]   + Kx[2,1]*P[2:H+2, 1:W+1] + Kx[2,2]*P[2:H+2, 2:W+2])
    acc_abs = np.abs(acc)
    if divide_by_8:
        if rounding:
            acc_abs = (acc_abs + 4) // 8
        else:
            acc_abs = acc_abs // 8
    if gain != 1:
        acc_abs = acc_abs * int(gain)
    acc_abs = np.clip(acc_abs, 0, 255).astype(np.uint8)
    return acc_abs

def metrics_core(hw_u8, ref_u8):
    """Calcula métricas MAE, MSE, PSNR no miolo Ω (ignora borda de 1px)."""
    H, W = hw_u8.shape
    hw = hw_u8[1:-1, 1:-1].astype(np.int32)
    rf = ref_u8[1:-1, 1:-1].astype(np.int32)
    diff = hw - rf
    mae = np.mean(np.abs(diff))
    mse = np.mean(diff**2)
    psnr = float("inf") if mse == 0 else 10.0 * np.log10((255.0**2) / mse)
    return mae, mse, psnr, diff

# =====================
# Carregar arquivos
# =====================
img_in = read_hex_image("lena_256x256_hex.hex")
img_verilog = read_pgm_p2("out_256x256_Lena_TopConvP.pgm")
golden = sobel_x_golden(img_in, divide_by_8=True, rounding=True, gain=2)

# =====================
# Métricas
# =====================
mae, mse, psnr, diff_core = metrics_core(img_verilog, golden)
print("==== COMPARAÇÃO (miolo Ω) ====")
print(f"MAE_Ω  = {mae:.4f}")
print(f"MSE_Ω  = {mse:.4f}")
print(f"PSNR_Ω = {psnr:.4f} dB")

# =====================
# Visualizações
# =====================
fig, axes = plt.subplots(1,3, figsize=(15,5))
axes[0].imshow(img_verilog, cmap="gray", vmin=0, vmax=255)
axes[0].set_title("Saída Verilog (.pgm)"); axes[0].axis("off")
axes[1].imshow(golden, cmap="gray", vmin=0, vmax=255)
axes[1].set_title("Golden (Python Sobel-X)"); axes[1].axis("off")
axes[2].imshow(diff_core, cmap="bwr")
axes[2].set_title("Mapa de erro (miolo Ω)"); axes[2].axis("off")
plt.show()

# =====================
# Histograma comparativo
# =====================
plt.figure(figsize=(7,5))
plt.hist(golden.ravel(), bins=256, range=(0,255),
         color='blue', alpha=0.5, label='Golden Python')
plt.hist(img_verilog.ravel(), bins=256, range=(0,255),
         color='red', alpha=0.5, label='Verilog')
plt.title("Histograma comparativo — Golden vs Verilog")
plt.xlabel("Níveis de cinza (0–255)")
plt.ylabel("Frequência de pixels")
plt.legend()
plt.show()
